package visualization.visualizer;

import visualization.event.*;
import visualization.result.reducer.*;
import visualization.result.*;

/**
 * Visualizer2D is an abstract base class for all applications that
 * visualize 2-dimensional data that is generated by a {@link visualization.generator.Generator}.
 *
 * @author		Roelof Kemp
 * @version		0.1
 **/
public abstract class Visualizer2D extends Visualizer1D {
	
	protected int resolutionY;

	/**
	 * Prepares the Visualizer for the specified resolution.
	 * Does <b>not</b> send an Event to the Generator
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 */
	public void setStartResolution(int resolutionX, int resolutionY) {
		this.resolutionX = resolutionX;
		this.resolutionY = resolutionY;
		receivedData[0] = new double[resolutionX * resolutionY];
		receivedData[1] = new double[resolutionX * resolutionY];
		numberOfReceipts[0] = new int[resolutionX * resolutionY];
		numberOfReceipts[1] = new int[resolutionX * resolutionY];
	}
	
	
	/**
	 * Sets the resolution of the Visualizer.
	 * A {@link visualization.event.Resolution2DEvent} is sent to the Generator
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 */
	public void setResolution(int resolutionX, int resolutionY) {
		this.resolutionX = resolutionX;
		this.resolutionY = resolutionY;
		receivedData[(currentBuf + 1) % 2] = new double[resolutionX * resolutionY];
		numberOfReceipts[(currentBuf + 1) % 2] = new int[resolutionX * resolutionY];
		sendUponSyncEvent(new Resolution2DEvent(resolutionX, resolutionY));
	}

	/**
	 * Starts the visualization.
	 * A {@link visualization.event.StartEvent} is sent to the Generator
	 */
	public void startGenerator() {
		if (reducer == null) setReductionMethod(REDUCER_DEFAULT);
		sendEvent(new StartEvent());
	}
	
	/**
	 * Sets the reduction method of the Visualizer.
	 * A {@link visualization.event.ReducerEvent} is sent to the Generator
	 *
	 * @param method the reduction method
	 */
	public void setReductionMethod(int method) {
		if (method == REDUCER_MAX) reducer = new Reducer2DMaximum();
		else if (method == REDUCER_MIN) reducer = new Reducer2DMinimum();
		else if (method == REDUCER_AVG) reducer = new Reducer2DAverage();
		sendUponSyncEvent(new ReducerEvent(reducer));
	}

	public void doUpcall(Result result) {
		Result2D result2D = (Result2D) result;
		int pos = 0;
		for (int y = result2D.getStartY(); y <= result2D.getEndY(); y++) {
			for (int x = result2D.getStartX(); x <= result2D.getEndX(); x++) {
				if (numberOfReceipts[currentBuf][y * resolutionX + x] > 0) {
					receivedData[currentBuf][y * resolutionX + x] = reducer.singleReduction(receivedData[currentBuf][y * resolutionX + x], result2D.getMatrixValue(pos++));
				} else {
					receivedData[currentBuf][y * resolutionX + x] = result2D.getMatrixValue(pos++);
				}
				numberOfReceipts[currentBuf][y * resolutionX + x]++;
			}
		}
	}

	/**
	 * Starts the visualization with given parameters.
	 * A {@link visualization.event.StartEvent} is sent to the Generator
	 * Depending on the parameters before the StartEvent a
	 * <li>ResolutionEvent is sent when <code>resolutionX</code> and <code>resolutionY</code> both > 0</li>
	 * <li>FrameSkipEvent is sent when <code>frameSkip</code> > 0</li>
	 * <li>ReductionMethodEvent is sent when <code>reductionMethod</code> >= 0</li>
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 * @param iterationskip the number of frames to be skipped
	 * @param reductionMethod the reduction method
	 */
	public void startGenerator(int resolutionX, int resolutionY, int iterationskip, int reductionMethod) {
		if (resolutionX > 0 && resolutionY > 0) {
			sendEvent(new Resolution2DEvent(resolutionX, resolutionY));
		}
		if (iterationskip > 0) {
			sendEvent(new IterationSkipEvent(iterationskip));
		}
		if (reductionMethod >= 0) {
			if (reductionMethod == REDUCER_MAX) reducer = new Reducer2DMaximum();
			else if (reductionMethod == REDUCER_MIN) reducer = new Reducer2DMinimum();
			else if (reductionMethod == REDUCER_AVG) reducer = new Reducer2DAverage();
			sendEvent(new ReducerEvent(reducer));
		}
		startGenerator();
	}
}
