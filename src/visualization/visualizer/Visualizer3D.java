package visualization.visualizer;

import visualization.event.*;
import visualization.result.reducer.*;
import visualization.result.*;


/**
 * Visualizer3D is an abstract base class for all applications that
 * visualize 3-dimensional data that is generated by a {@link visualization.generator.Generator}.
 *
 * @author		Roelof Kemp
 * @version		0.1
 **/
public abstract class Visualizer3D extends Visualizer2D {

	protected int resolutionZ;
	
	/**
	 * Prepares the Visualizer for the specified resolution.
	 * Does <b>not</b> send an Event to the Generator
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 * @param resolutionZ the resolution in the z dimension
	 */
	public void setStartResolution(int resolutionX, int resolutionY, int resolutionZ) {
		this.resolutionX = resolutionX;
		this.resolutionY = resolutionY;
		this.resolutionZ = resolutionZ;
		receivedData[0] = new double[resolutionX * resolutionY * resolutionZ];
		receivedData[1] = new double[resolutionX * resolutionY * resolutionZ];
		numberOfReceipts[0] = new int[resolutionX * resolutionY * resolutionZ];
		numberOfReceipts[1] = new int[resolutionX * resolutionY * resolutionZ];
	}
	
	
	/**
	 * Sets the resolution of the Visualizer.
	 * A {@link visualization.event.Resolution3DEvent} is sent to the Generator
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 * @param resolutionZ the resolution in the z dimension
	 */
	public void setResolution(int resolutionX, int resolutionY, int resolutionZ) {
		this.resolutionX = resolutionX;
		this.resolutionY = resolutionY;
		this.resolutionZ = resolutionZ;
		receivedData[(currentBuf + 1) % 2] = new double[resolutionX * resolutionY * resolutionZ];
		numberOfReceipts[(currentBuf + 1) % 2] = new int[resolutionX * resolutionY * resolutionZ];
		sendUponSyncEvent(new Resolution3DEvent(resolutionX, resolutionY, resolutionZ));
	}

	public void setReductionMethod(int method) {
		if (method == REDUCER_MAX) reducer = new Reducer3DMaximum();
		else if (method == REDUCER_MIN) reducer = new Reducer3DMinimum();
		else if (method == REDUCER_AVG) reducer = new Reducer3DAverage();
		sendUponSyncEvent(new ReducerEvent(reducer));
	}

	public void doUpcall(Result result) {
		Result3D result3D = (Result3D) result;
		int pos = 0;
		for (int z = result3D.getStartZ(); z <= result3D.getEndZ(); z++) {
			for (int y = result3D.getStartY(); y <= result3D.getEndY(); y++) {
				for (int x = result3D.getStartX(); x <= result3D.getEndX(); x++) {
					if (numberOfReceipts[currentBuf][z * resolutionY * resolutionX + y * resolutionX + x] > 0) {
						receivedData[currentBuf][z * resolutionY * resolutionX + y * resolutionX + x] = reducer.singleReduction(receivedData[currentBuf][y * resolutionX + x], result3D.getMatrixValue(pos++));
					} else {
						receivedData[currentBuf][z * resolutionY * resolutionX + y * resolutionX + x] = result3D.getMatrixValue(pos++);
					}
					numberOfReceipts[currentBuf][z * resolutionY * resolutionX + y * resolutionX + x]++;
				}
			}
		}
	}
	
	
	/**
	 * Starts the visualization with given parameters.
	 * A {@link visualization.event.StartEvent} is sent to the Generator
	 * Depending on the parameters before the StartEvent a
	 * <li>ResolutionEvent is sent when <code>resolutionX</code> and <code>resolutionY</code> and <code>resolutionZ</code> all > 0</li>
	 * <li>IterationSkipEvent is sent when <code>iterationSkip</code> > 0</li>
	 * <li>ReductionMethodEvent is sent when <code>reductionMethod</code> >= 0</li>
	 *
	 * @param resolutionX the resolution in the x dimension
	 * @param resolutionY the resolution in the y dimension
	 * @param resolutionZ the resolution in the z dimension
	 * @param iterationskip the number of iterations to be skipped
	 * @param reductionMethod the reduction method
	 */
	public void startGenerator(int resolutionX, int resolutionY, int resolutionZ, int iterationskip, int reductionMethod) {
		   if (resolutionX > 0 && resolutionY > 0 && resolutionZ > 0) {
			   sendEvent(new Resolution3DEvent(resolutionX, resolutionY, resolutionZ));
		   }
		   if (iterationskip > 0) {
			   sendEvent(new IterationSkipEvent(iterationskip));
		   }
		   if (reductionMethod >= 0) {
			   if (reductionMethod == REDUCER_MAX) reducer = new Reducer3DMaximum();
			   else if (reductionMethod == REDUCER_MIN) reducer = new Reducer3DMinimum();
			   else if (reductionMethod == REDUCER_AVG) reducer = new Reducer3DAverage();
			   sendEvent(new ReducerEvent(reducer));
		   }
		   startGenerator();	
	}
}
